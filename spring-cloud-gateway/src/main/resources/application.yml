server:
  port: 8090
  servlet:
#    GateWay的自定义前缀
    context-path: /api

spring:
  application:
    name: gateway-service

  cloud:
#    consul注册中心配置
    consul:
      host: 127.0.0.1
      port: 8500
      discovery:
        enabled: true #启用服务发现
        register: true #启用服务注册
        deregister: true #服务停止时取消注册
        prefer-ip-address: true #表示注册时使用IP而不是HostName
        health-check-interval: 10s  #健康检查频率
        health-check-critical-timeout: 30s

#    sentinel配置(限流熔断)
    sentinel:
      enabled: true
      transport:
#        被sentinel监听的服务的端口(server.port + 1)
        port: 8091
#        Sentinel 控制台地址（Sentinel控制台需要单独安装,控制台登录需要密码(默认用户名和密码都是 sentinel),下载地址:https://github.com/alibaba/Sentinel/releases）
        dashboard: localhost:8080
      #  取消Sentinel控制台懒加载
      eager: true

    stream:
      kafka:
#        Binder 是 Spring Cloud Stream 的一个抽象概念，是应用与消息中间件之间的粘合剂。目前 Spring Cloud Stream 实现了 Kafka 和 Rabbit MQ 的binder
        binder:
          auto-create-topics: true
#          brokers: localhost:9092
          brokers: 192.168.1.142:9092
          replication-factor: 1




#    配置网关
    gateway:
#      配置网关路由
      routes:
        - id: biz_path_route
          #格式为：lb://应用注册服务名(使用服务名称访问,需要确保Gateway注册到了注册中心),lb说明是使用LoadBalanceClient方式请求
          uri: lb://biz-provider
          order: 0
          predicates:
#            这个Path需要注意一下:如果Gateway网关,有自定义的前缀,那么需要将自定义的前缀,加到对应服务的uri的前面
            - Path=/api/biz/**
          filters:
#            StripPrefix过滤器是去掉一个路径
            - StripPrefix=1

        - id: user_path_route
          uri: lb://user-provider
          order: 0
          predicates:
            - Path=/api/user/**
          filters:
            - StripPrefix=1

        - id: base_path_route
          uri: lb://base-provider
          order: 0
          predicates:
            - Path=/api/base/**
          filters:
            - StripPrefix=1





#  链路追踪配置
  sleuth:
    enabled: true
#    设置不通过http传输
    http:
      enabled: true
    feign:
      enabled: true
    messaging:
      kafka:
        enabled: true
    sampler:
#      收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）
      probability: 1.0
#    使用128位的traceId代替64位的traceId
    trace-id128: true

  zipkin:
    enabled: true
#    sender:
#      当设置了zipkin传输方式为消息中间件时,那么在启动zipkin server端需要加上启动参数,如: java -DKAFKA_ZOOKEEPER=192.168.1.142:2181 -jar zipkin.jar
#      type: kafka
#    是否启用服务发现,如果为false ,则以base-url设置为准
    discovery-client-enabled: true
#    当设置sleuth-cli收集信息后通过http传输到zinkin-server时,zipkin服务端地址
    base-url: http://localhost:9411/
#    在发送给zipkin server之前是否进行压缩数据
    compression:
      enabled: true
